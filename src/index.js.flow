/* @flow weak */

export type Network = {
    bip32: {
        public: number;
        private: number;
    };
    bech32: ?string;
    pubKeyHash: number;
    scriptHash: number;
    dustThreshold: number;
}

export type Output = {
    script: Buffer;
    value: number;
};

export type Input = {
    script: Buffer;
    hash: Buffer;
    index: number;
    sequence: number;
};

type Stack = Array<Buffer | number>;

export class address {
    static fromBase58Check(address: string): {hash: Buffer, version: number} {throw 1};
    static fromBech32(address: string): {data: Buffer, version: number, prefix: string} {throw 1};
    static fromOutputScript(script: Buffer, network?: Network): string {throw 1};
    static toBase58Check(hash: Buffer, version: number): string {throw 1};
    static toOutputScript(address: string, network?: Network): Buffer {throw 1};
};

export class HDNode {
    depth: number;
    parentFingerprint: number;
    index: number;
    chainCode: Buffer;
    getPublicKeyBuffer(): Buffer {throw 1}
    setNetwork(network: Network): void {throw 1}
    static fromBase58(
        str: string,
        networks: ?(Array<Network> | Network)
    ): HDNode {throw 1}
    derive(index: number): HDNode {throw 1}
    derivePath(path: string): HDNode {throw 1}
    toBase58(): string {throw 1}
    getAddress(): string {throw 1}
    getIdentifier(): Buffer {throw 1}

    static fromBase58(base: string, network?: ?(Network | Array<Network>)): HDNode {throw 1}

    static fromInternal(chainCode: Buffer, publicKey: Buffer, network: Network, depth: number, index: number, parentFingerprint: number): HDNode {throw 1}
}

export class Transaction {
    version: number;
    locktime: number;
    ins: Array<Input>;
    outs: Array<Output>;
    joinsplits: Array<any>;

    toBuffer(): Buffer {throw 1}
    toHex(): string {throw 1}
    getId(): string {throw 1}

    byteLength(): number {throw 1}
    __byteLength(witness: boolean): number {throw 1}
    joinsplitByteLength(): number {throw 1}

    static fromHex(hex: string, zcash?: boolean): Transaction {throw 1}
    static isCoinbaseHash(buffer: Buffer): boolean {throw 1}
}

export class crypto {
    static hash256(buffer: Buffer): Buffer {throw 1}
    static hash160(buffer: Buffer): Buffer {throw 1}
}

export class script {
  static scriptHash: {
    output: {
      encode: (scriptHash: Buffer) => Buffer;
    };
  };
  static pubKeyHash: {
    output: {
      encode: (pubKeyHash: Buffer) => Buffer;
    };
  };
  static witnessPubKeyHash: {
    output: {
      encode: (pubkeyHash: Buffer) => Buffer;
    };
  };
  static witnessScriptHash: {
    output: {
      encode: (scriptHash: Buffer) => Buffer;
    };
  };
  static nullData: {
    output: {
      check: (script: Stack | Buffer) => boolean;
      encode: (scriptHash: Buffer) => Buffer;
      decode: (script: Buffer) => Buffer;
    };
  };
}

export var networks: {[key: string]: Network} = {}
